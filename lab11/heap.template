#include "heap.h"
#include <cstdlib>
#include <vector>
#include <cassert>

using namespace std;

template <typename T>
heap<T>::heap() {
	vector<T> v;
}

// postcondition: empty heap has been created
template <typename T>
typename heap<T>::size_t  heap<T>::size() const {
	return v.size();
}

template <typename T>
bool heap<T>::is_empty() const {
	return v->empty();
}

template <typename T>
void heap<T>::insert (const T& item) {
	v.push_back(item);

	int elem = v.size() - 1;

	while (v.at(elem) > v.at((elem-1)/2)) {
		int temp = v.at(elem);
		v.at(elem) = v.at((elem-1)/2);
		v.at((elem-1)/2) = temp;
		elem = (elem-1)/2;
	}
}

template <typename T>
void heap<T>::remove() {
	assert(!v.is_empty());

	v.at(0) = v.back();
	v.pop_back();

	int elem = 0;

	while (v.at(elem) < v.at(2*elem+1)) {
		int temp = v.at(elem);
		v.at(elem) = v.at(2*elem+1);
		v.at(2*elem+1) = temp;
		elem = 2*elem+1;
	}

}

template <typename T>
T heap<T>::max() const {
	assert(!v.is_empty());
	return v.at(0);
}

template <typename T>
T& heap<T>::max() {
	assert(!v.is_empty());
	return v.at(0);
}

template <typename T>
typename heap<T>::size_t heap<T>::max_child (size_t index) const { 
	assert(2*index+2 < v.size() || 2*index+3 < v.size());
	
	if (2*index+2 < v.size() &&  2*index+3 > v.size()) {
		return 2*index+1;
	}
	else if (v.at(2*index+1) > v.at(2*index+3)) {
		return 2*index+1;
	}
	else [
		return 2*index+2;
	}
}